{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAAYAN\\\\OneDrive\\\\Desktop\\\\android2\\\\E-Commerce Website - Project\\\\frontend\\\\src\\\\Components\\\\NewCollections\\\\NewCollections.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport \"./NewCollections.css\";\nimport Item from \"../Item/Item\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewCollections = () => {\n  _s();\n  // State to hold the new collection items\n  const [new_collection, setNew_collection] = useState([]);\n\n  // Effect to fetch data from the API when the component mounts\n  useEffect(() => {\n    fetch(\"http://localhost:4000/newcollections\").then(response => response.json()) // Parse the response as JSON\n    .then(data => setNew_collection(data)); // Update state with the fetched data\n  }, []); // Empty dependency array means this effect runs only once, after the initial render\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-collections\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NEW COLLECTIONS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"collections\",\n      children: new_collection.map((item, i) => {\n        return /*#__PURE__*/_jsxDEV(Item, {\n          // Use index as key, which is not ideal but sufficient here\n          id: item.id,\n          name: item.name,\n          image: item.image,\n          new_price: item.new_price,\n          old_price: item.old_price\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(NewCollections, \"VfajDx86lqJF+guSFbjJ5ChSAoc=\");\n_c = NewCollections;\nexport default NewCollections;\nvar _c;\n$RefreshReg$(_c, \"NewCollections\");","map":{"version":3,"names":["React","Item","useState","useEffect","jsxDEV","_jsxDEV","NewCollections","_s","new_collection","setNew_collection","fetch","then","response","json","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","i","id","name","image","new_price","old_price","_c","$RefreshReg$"],"sources":["C:/Users/MAAYAN/OneDrive/Desktop/android2/E-Commerce Website - Project/frontend/src/Components/NewCollections/NewCollections.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./NewCollections.css\";\r\nimport Item from \"../Item/Item\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst NewCollections = () => {\r\n  // State to hold the new collection items\r\n  const [new_collection, setNew_collection] = useState([]);\r\n\r\n  // Effect to fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:4000/newcollections\")\r\n      .then((response) => response.json()) // Parse the response as JSON\r\n      .then((data) => setNew_collection(data)); // Update state with the fetched data\r\n  }, []); // Empty dependency array means this effect runs only once, after the initial render\r\n\r\n  return (\r\n    <div className=\"new-collections\">\r\n      <h1>NEW COLLECTIONS</h1>\r\n      <hr />\r\n      <div className=\"collections\">\r\n        {/* Map through the new_collection array and render an Item component for each */}\r\n        {new_collection.map((item, i) => {\r\n          return (\r\n            <Item\r\n              key={i} // Use index as key, which is not ideal but sufficient here\r\n              id={item.id}\r\n              name={item.name}\r\n              image={item.image}\r\n              new_price={item.new_price}\r\n              old_price={item.old_price}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewCollections;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,sBAAsB;AAC7B,OAAOC,IAAI,MAAM,cAAc;AAC/B,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACAC,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,sCAAsC,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACpCF,IAAI,CAAEG,IAAI,IAAKL,iBAAiB,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC9C,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACET,OAAA;IAAKU,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BX,OAAA;MAAAW,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBf,OAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNf,OAAA;MAAKU,SAAS,EAAC,aAAa;MAAAC,QAAA,EAEzBR,cAAc,CAACa,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;QAC/B,oBACElB,OAAA,CAACJ,IAAI;UACK;UACRuB,EAAE,EAAEF,IAAI,CAACE,EAAG;UACZC,IAAI,EAAEH,IAAI,CAACG,IAAK;UAChBC,KAAK,EAAEJ,IAAI,CAACI,KAAM;UAClBC,SAAS,EAAEL,IAAI,CAACK,SAAU;UAC1BC,SAAS,EAAEN,IAAI,CAACM;QAAU,GALrBL,CAAC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMP,CAAC;MAEN,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACb,EAAA,CAhCID,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AAkCpB,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}